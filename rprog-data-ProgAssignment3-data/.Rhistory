getwd()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ncol(outcome)
neow(outcome)
nrow(outcome)
names(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
best <- function(state, outcome) {
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if(outcome %in% outcomes == FALSE) {
stop("invalid outcome")
}
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Filter and simplify the column names
## 2. Hospital Name: varchar (50) Lists the name of the hospital.
## 7. State: varchar (2) Lists the 2 letter State code in which the hospital is located.
## 11. Hospital 30-Day Death (Mortality) Rates from Heart Attack: Lists the risk adjusted rate (percentage) for each hospital.
## 17. Hospital 30-Day Death (Mortality) Rates from Heart Failure: Lists the risk adjusted rate (percentage) for each hospital.
## 23. Hospital 30-Day Death (Mortality) Rates from Pneumonia: Lists the risk adjusted rate (percentage) for each hospital.
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validating the state name given in the input
states <- data[, 2]
states <- unique(states)
if(state %in% states == FALSE ) {
stop("invalid state")
}
## Grab only rows with our state value
data <- data[data$state==state & data[outcome] != 'Not Available',  ]
vals <- data[, outcome]
rowNum <- which.min(vals)
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
rankhospital <- function(state, outcome, num) {
## Validating the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) {
stop("invalid outcome")
}
## Reading outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validating the state name given in the input
states <- data[, 2]
states <- unique(states)
if(state %in% states == FALSE ){
stop("invalid state")
}
## Validating the num value given as input
if( num != "best" && num != "worst" && num%%1 != 0){
stop("invalid num")
}
## Grab only rows with our state value
data <- data[data$state==state & data[outcome] != 'Not Available', ]
## Ordering the data
data[outcome] <- as.data.frame(sapply(data[outcome], as.numeric))
data <- data[order(data$name, decreasing = FALSE), ]
data <- data[order(data[outcome], decreasing = FALSE), ]
## Processing the num argument
vals <- data[, outcome]
if( num == "best" ) {
rowNum <- which.min(vals)
} else if(num == "worst") {
rowNum <- which.max(vals)
} else {
rowNum <- num
}
## Returning hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankall <- function(outcome, num = "best") {
## Validating the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) {
stop("invalid outcome")
}
## Reading outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validating the num value given as input
if( num != "best" && num != "worst" && num%%1 != 0){
stop("invalid num")
}
## Grab only rows with data in our outcome
data <- data[data[outcome] != 'Not Available', ]
## Ordering the data
data[outcome] <- as.data.frame(sapply(data[outcome], as.numeric))
data <- data[order(data$name, decreasing = FALSE), ]
data <- data[order(data[outcome], decreasing = FALSE), ]
## auxiliar function
hospitalsByRank <- function(dat, estado, n) {
dat <- dat[dat$state==estado, ]
vals <- dat[, outcome]
if( n == "best" ) {
rowNum <- which.min(vals)
} else if( n == "worst" ) {
rowNum <- which.max(vals)
} else {
rowNum <- n
}
dat[rowNum, ]$name
}
## For each state, we need to find the hospital ranking number
states <- data[, 2]
states <- unique(states)
newdata <- data.frame("hospital"=character(), "state"=character())
for(st in states) {
hosp <- hospitalsByRank(data, st, num)
newdata <- rbind(newdata, data.frame(hospital=hosp, state=st))
}
## Returning a data frame with the hospital names and the (abbreviated) state name
newdata <- newdata[order(newdata['state'], decreasing = FALSE), ]
newdata
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
View(outcome)
getwd()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
2
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv "
download.file(fileUrl, destfile="./data/microdata.csv", method="curl")
microData <- read.table("./data/microdata.csv", sep=",", header=TRUE
sum(!is.na(microData$VAL[microData$VAL==24]))
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
dbDisconnect(ucscDb)
source("http://biocinductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(sqldf)
hurl <- "http://biostat.jhsph.edu/~jleek/contact.html"
con <- url(hurl)
htmlCode <- readLines(con)
close(con)
sapply(htmlCode[c(10, 20, 30, 100)], nchar)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
file <- file.path(getwd(), "jeff.jpg")
download.file(url, file, mode = "wb", method = "curl")
img <- readJPEG(file, native = TRUE)
library(jpeg)
install.packages("jpeg")
library(jpeg)
img <- readJPEG(file, native = TRUE)
quantile(img, probs = c(0.3, 0.8))
run_analysis()
getwd()
run_analysis()
run_analysis()
getwd()
getwd()
